Atom one dark Theme

App with Vite (React+TS) and Postman

Backend
Swagger: http://flying-food-swagger.s3-website.eu-central-1.amazonaws.com
API base url: https://d4crsehc65.execute-api.eu-central-1.amazonaws.com/prod
API key: e34vAOxj2C9fo2NVp9kT89QBOA4P1qvl459VtZak

Siti utili:

- https://vitejs.dev/guide/
- https://web.postman.co/workspace/My-Workspace~81742c0f-cb9f-4327-883a-40b7f9b1e17b/quickstart

Progetto creato con:
npm create vite@latest FoodApp -- --react-ts
npm install

Aggiungere il type checker:
npm i vite-plugin-checker

"dev": "vite" diventa "start": "vite --port=3000"

Modificare Vite.config
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import checker from "vite-plugin-checker";

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    react(),
    checker({
      typescript: true,
    }),
  ],
});

Icone:
https://fontawesome.com/search

Stile generale:
https://styled-components.com/docs/basics#installation

Creare .prettierrc
{
    "printWidth": 90,
    "bracketSpacing": true,
    "bracketSameLine": false,
    "singleQuote": true,
    "trailingComma": "none",
    "arrowParens": "always",
    "semi": false,
    "tabWidth": 2
}

creare cartella .vscode con all'interno settings.json
{
    "editor.codeActionsOnSave": {
        "source.fixAll.eslint": "explicit"
    },
    "files.eol": "\n"
}


https://react.dev/learn/react-developer-tools


// Gestire pi√π schermate
https://reactrouter.com/en/main 

Generics <> e template literals ``

https://it.legacy.reactjs.org/docs/context.html
https://react.dev/reference/react/createContext
https://react.dev/reference/react/useContext
https://react.dev/learn/passing-data-deeply-with-context

https://react-redux.js.org/

https://redux-toolkit.js.org/introduction/getting-started
https://www.freecodecamp.org/news/redux-and-redux-toolkit-for-beginners/

npm list nomeApp -> to check if something is already installed

Redux persist

addons utili per edge/crhome: 
  React developer toolkit
  Redux Devtools

  ColorZilla
  Html tree generator
  lighthouse
  pesticide for chrome

addon per vscode:
 git graph
 eslint
 Prettier eslint

 Sito utile per capire Redux!!!!!!!!
 https://builtin.com/software-engineering-perspectives/useselector-usedispatch-react-redux

 Da guarda come funziona Redux-saga e postman

 React-Toastify
 https://www.npmjs.com/package/react-toastify


 // Redux thunk

 creare slicer per catalog

----------- altre cose del tirocinio
javascript.info
- 3.1
- 3.6

Promises, async/await, tutto tranne 11.7

Basi di HTTP (metodi, struttura messaggi, ecc.)

Esercizio async JS

Quick start + thinking in react
----------------------------------------------------------------
npm run test (cambiare il file jest con i vari link)

https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html

TypeScript for JS Programmers
Handbook

tsc --noEmitOnError hello.ts
tsc hello.ts

tsc --target es2015 .\Hello.ts
-------------------------------------------------------------

function Text(fontSize = '12', children) {
  return <h1 fontSize>children</h1>;
}

function TextSmall(fontSize, children) {
  return <h1 fontSize="10">children</h1>;
}

function TextBig(fontSize, children) {
  return <h1 fontSize="30">children</h1>;
}

<Text>Ciao</Text>;
------------------------------------------------------
import { useCallback, useEffect, useMemo, useState } from 'react';
import './App.css';

const names = ['Lorenzo', 'Manolo', 'Pierpaolo', 'Fabio', 'Sergio'];
function App() {
  const [todo, setTodo] = useState();
  const [filterTodo, setFilterTodo] = useState<any>();

  const [filter, setFilter] = useState('');

  useEffect(() => {
    fetch(`https://jsonplaceholder.typicode.com/todos/${filterTodo}`)
      .then((response) => response.json())
      .then((json) => setTodo(json))
      .catch(() => setTodo(undefined));
  }, [filterTodo]);

  const onFilter = useCallback((e) => {
    setFilter(e.target.value);
  }, []);

  const filteredNames = useMemo(
    () => (filter ? names.filter((name) => name.includes(filter)) : names),
    [filter]
  );

  return (
    <>
      {filteredNames.map((name) => (
        <p key={name}>{name}</p>
      ))}
      <input value={filter} onChange={onFilter} />
      <input
        value={filterTodo}
        onChange={(e) => setFilterTodo(e.target.value)}
      />
      {todo ? (
        <div>
          <p>{todo!.title}</p>
        </div>
      ) : (
        <div>
          <p>Nessun todo</p>
        </div>
      )}
    </>
  );
}

export default App;
--------------------------------------


TODO:
- creare slicer per catalog
- convertire chiamate API/HTTP in redux thunk
- refactor di ProductDetails in ProductDetails/<id_prodotto>
- variabili d'ambiente e file env con vite
- responsiveness
- .env 
- cambiare cartelle in components singoli


 
